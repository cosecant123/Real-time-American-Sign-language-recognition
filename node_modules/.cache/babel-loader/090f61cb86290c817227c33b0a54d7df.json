{"ast":null,"code":"var _jsxFileName = \"/Users/suchangcao/study/Northeastern University/2022-9-07(Grad-2-2)/CS 5330/project/react-mediapipe-main/Real-time-American-Sign-language-recognition/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Hangman.css';\nimport Home from './Home'; // eslint-disable-next-line import/no-anonymous-default-export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  // eslint-disable-next-line no-use-before-define\n  const [guessWord, setGuessWord] = useState('');\n  const [wordBoard, setWordBoard] = useState([]);\n  const [chancesLeft, setChancesLeft] = useState(8);\n  const [inputLetter, setInputLetter] = useState('');\n  const [restart, setRestart] = useState(false); // Initialize the board\n\n  const board = guessWord => {\n    const numOfLetter = guessWord.length;\n    const newBoard = new Array(numOfLetter).fill('_');\n    return newBoard;\n  }; // Helper function to get a new game word randomly from a word list\n\n\n  useEffect(() => {\n    async function fetchWord() {\n      const response = await fetch('/words.txt');\n      const text = await response.text();\n      const words = text.split(/\\s+/);\n      const randomIndex = Math.floor(Math.random() * words.length);\n      const randomWord = words[randomIndex];\n      setGuessWord(randomWord);\n    }\n\n    fetchWord();\n  }, [restart]);\n  useEffect(() => {\n    if (guessWord) {\n      setWordBoard(board(guessWord));\n    }\n  }, [guessWord]); // Handle input letter and update word board and chances left accordingly\n\n  function handleInputLetter() {\n    if (isGameOver()) {\n      return;\n    }\n\n    if (inputLetter.length > 1 || inputLetter.length === 0) {\n      // setChancesLeft(chancesLeft - 1);\n      // setInputLetter('');\n      return;\n    }\n\n    const lowercaseL = inputLetter.toLowerCase();\n\n    if (wordBoard.includes(lowercaseL)) {\n      setInputLetter('');\n      return;\n    }\n\n    let count = 0;\n    const newBoard = [...wordBoard];\n\n    for (let i = 0; i < guessWord.length; i++) {\n      if (guessWord[i] === lowercaseL) {\n        newBoard[i] = lowercaseL;\n        count += 1;\n      }\n    }\n\n    if (count === 0) {\n      setChancesLeft(chancesLeft - 1);\n    }\n\n    setWordBoard(newBoard);\n    setInputLetter('');\n  } // Check if game is over\n\n\n  function isGameOver() {\n    if (chancesLeft === 0) {\n      return true;\n    }\n\n    for (const letter of wordBoard) {\n      if (letter === '_') {\n        return false;\n      }\n    }\n\n    return true;\n  } // Check if player wins\n\n\n  function getWinOrNot() {\n    for (const letter of wordBoard) {\n      if (letter === '_') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Hangman\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Hangman-image\",\n      children: isGameOver() && getWinOrNot() ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/9.jpeg\",\n        class: \"my-image\",\n        alt: \"hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/${chancesLeft}.jpeg`,\n        class: \"my-image\",\n        alt: \"hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 97\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Hangman-word\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Hangman-wordBoard\",\n        children: wordBoard.map((letter, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"Hangman-letter\",\n          children: [letter, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Hint: \", guessWord, \", just for testing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Hangman-chancesLeft\",\n        children: [\"Chances left: \", chancesLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Hangman-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          maxLength: \"1\",\n          value: inputLetter,\n          onChange: event => setInputLetter(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputLetter,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Hangman-gameOverMessage\",\n        children: [getWinOrNot() ? \"Congratulations! You won!\" : \"Game over! The word is: \" + guessWord, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            setRestart(!restart);\n            setChancesLeft(8);\n          },\n          children: \"Play again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}, \"tJ91W5G/n5XwkgKxi600ov1Vmys=\");","map":{"version":3,"sources":["/Users/suchangcao/study/Northeastern University/2022-9-07(Grad-2-2)/CS 5330/project/react-mediapipe-main/Real-time-American-Sign-language-recognition/src/App.js"],"names":["React","useState","useEffect","Home","guessWord","setGuessWord","wordBoard","setWordBoard","chancesLeft","setChancesLeft","inputLetter","setInputLetter","restart","setRestart","board","numOfLetter","length","newBoard","Array","fill","fetchWord","response","fetch","text","words","split","randomIndex","Math","floor","random","randomWord","handleInputLetter","isGameOver","lowercaseL","toLowerCase","includes","count","i","letter","getWinOrNot","map","index","event","target","value","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Hangman.css';\nimport Home from './Home'\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  // eslint-disable-next-line no-use-before-define\n  const [guessWord, setGuessWord] = useState('');\n  const [wordBoard, setWordBoard] = useState([]);\n  const [chancesLeft, setChancesLeft] = useState(8);\n  const [inputLetter, setInputLetter] = useState('');\n  const [restart, setRestart] = useState(false);\n\n  // Initialize the board\n  const board = (guessWord) => {\n    const numOfLetter = guessWord.length;\n    const newBoard = new Array(numOfLetter).fill('_');\n    return newBoard;\n  }\n\n  // Helper function to get a new game word randomly from a word list\n  useEffect(() => {\n    async function fetchWord() {\n      const response = await fetch('/words.txt');\n      const text = await response.text();\n      const words = text.split(/\\s+/);\n      const randomIndex = Math.floor(Math.random() * words.length);\n      const randomWord = words[randomIndex];\n      setGuessWord(randomWord);\n    }\n    fetchWord();\n  }, [restart]);\n\n  useEffect(() => {\n    if (guessWord) {\n      setWordBoard(board(guessWord));\n    }\n  }, [guessWord])\n\n // Handle input letter and update word board and chances left accordingly\n function handleInputLetter() {\n  if (isGameOver()) {\n    return;\n  }\n   \n  if (inputLetter.length > 1 || inputLetter.length === 0) {\n    // setChancesLeft(chancesLeft - 1);\n    // setInputLetter('');\n    return;\n  }\n  const lowercaseL = inputLetter.toLowerCase();\n  if (wordBoard.includes(lowercaseL)) {\n    setInputLetter('');\n    return;\n  }\n  let count = 0;\n  const newBoard = [...wordBoard];\n  for (let i = 0; i < guessWord.length; i++) {\n    if (guessWord[i] === lowercaseL) {\n      newBoard[i] = lowercaseL;\n      count += 1;\n    }\n  }\n  if (count === 0) {\n    setChancesLeft(chancesLeft - 1);\n  }\n  setWordBoard(newBoard);\n  setInputLetter('');\n}\n\n// Check if game is over\nfunction isGameOver() {\n  if (chancesLeft === 0) {\n    return true;\n  }\n  for (const letter of wordBoard) {\n    if (letter === '_') {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Check if player wins\nfunction getWinOrNot() {\n  for (const letter of wordBoard) {\n    if (letter === '_') {\n      return false;\n    }\n  }\n  return true;\n}\n\n  return (\n    <div className=\"Hangman\">\n      <div className=\"Hangman-image\">\n        {isGameOver() && getWinOrNot() ? <img src=\"/9.jpeg\" class=\"my-image\" alt=\"hangman\" /> : <img src={`/${chancesLeft}.jpeg`} class=\"my-image\" alt=\"hangman\" />}\n      </div>\n      <div className=\"Hangman-word\">\n        <div>\n          <Home />\n        </div>\n        <div className=\"Hangman-wordBoard\">\n          {wordBoard.map((letter, index) => (\n            <span key={index} className=\"Hangman-letter\">{letter} </span>\n          ))}\n        </div>\n        <div>Hint: {guessWord}, just for testing</div>\n        <div className=\"Hangman-chancesLeft\">Chances left: {chancesLeft}</div>\n        <div className=\"Hangman-input\">\n          <input type=\"text\" maxLength=\"1\" value={inputLetter} onChange={(event) => setInputLetter(event.target.value)} />\n          <button onClick={handleInputLetter}>Submit</button>\n        </div>\n        {isGameOver() &&\n          <div className=\"Hangman-gameOverMessage\">\n            {getWinOrNot() ? \"Congratulations! You won!\" : \"Game over! The word is: \" + guessWord}\n            <button onClick={e => { setRestart(!restart); setChancesLeft(8); }}>Play again!</button>\n          </div>\n          }\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}